Alvaro Enrique Martin Chango NIU 16335979
Guillem Luzon Benaiges NIU 1636257
Lucas Dalmau Garces NIU 1636290

Guillem:
1st Milestone
I implemented an initial version of the doAction method, but that version got
    scraped due to the fact that was extremely hardcoded, making it extremely
    hard to maintain.
In the new version I created 4 new classes, DoorState, Locked, Unlocked
    and States.
DoorState is an abstract class that holds the structure of each of the derived
    classes, those being the Locked and Unlocked classes.
Two things of note in the DoorState class are the setStateName method, which
    changes the new state of the door and the getState() getter method which as
    the name implies, it gets the current state of the door.
I did the States class in an attempt to make it similar to the structure of the
    Actions class.
The Locked class, as it's constructor implies, changes the state of the door to
    States.LOCKED which is a String with "locked" as it's value and the only
    method that does something is "unlock".
The Unlocked class has most of the code regarding the change of the door states
    because the logic is that you can only do actions with the door when
    it is unlocked, that being opening, closing and locking the door.
2nd Milestone
I focused on making the contents of all classes to follow the SUN coding style
    using the CheckStyle Plugin, both comments, making variables and class
    names follow the SUN style naming conventions, adding final to each
    variable and specifying when a rule could not be implemented.
I implemented logback into the project. It creates a html file into the /logs
    directory, and depending on the logback.xml root attribute "level" logback
    appends each log into that file.

Lucas:
I implemented all the areas design, first of all, i removed the DirectoryDoors class and I created the new Directory area.
This new class contains the node root that contains all the others areas 'representing a tree'.
with this implemented, I created the new abstract class 'Area' where I have had to create some abstract methods like getDoorsGivingAcces and findAreaById.
this class extends two new classes that I already make: Partition(contains an array of other areas) and Space(contains an array of the different doors that gives acces to an Area)
in both classes I implemented the abstract methods, his attributes and constructors.
Also I have modified the Door constructor so that when creating a door the areas it connects are needed to add the door to the area that gives access

Alvaro:
I Implemented all the design of the permissions and schedulers of all the groups, including the creation of the groups and the declaration of all of them.
Specifically I added to the user class a new attributed that represents the group where the user belongs to.
After this I separated the Directory users class into DirectoryUSerGroups and USer group,(Also having the user class).
In the user group I implemented the constructor of the class and also added the different attributes of the class such as the different lists required, the grup ID and so.
Also in the class User group there are the respective getters and setters for each attribute.
After that I modified the class DirectoryUserGroups by initializing the different groups and also by creating the lists of each group.
Also I modified the class user  by adding the three methods that check if a user is authorized or not.
to do the checks I created a class times that has global attributes with the specific requirements of time for employees and managers.
Finally I end a method from the RequestReader class that checks tif a user is authorized or not.
I helped using the checkstyle rules and alo helped with comments in some of the classes of the code, describing how they actually work and also
writing some specifications that would help other people understanding the code.

